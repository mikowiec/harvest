#!/usr/bin/perl -w

use Data::Dumper;

$exclude="phys/test_phys.cpp phys/test_phys2.cpp phys/test_phys4.cpp phys/test_phys5.cpp ".
         "hw/fdstream.cpp hw/win32_errors.cpp hw/conc_win32.cpp hw/conc_pthread.cpp hw/gfx_win32.cpp hw/event_win32.cpp ".
         "hw/gfx_x11.cpp hw/event_x11.cpp hw/snd_dummy.cpp hw/snd_simple.cpp hw/snd_simple_impl.cpp ".
         "hw/snd_wave.cpp hw/snd_mp3.cpp hw/snd_openal.cpp hw/snd_dsound.cpp hw/gfx_sdl.cpp hw/event_sdl.cpp ".
         "gfx/pm/test_stuff.cpp hw/video.cpp hw/video_helper.cpp os/event/event_sdl.cpp ".
         "os/event/event_win32.cpp os/event/event_x11.cpp ".
         "os/conc_win32.cpp os/win32_errors.cpp os/conc_pthread.cpp ".
	 "os/gfx/gfx_win32.cpp os/gfx/gfx_x11.cpp os/gfx/gfx_sdl.cpp ".
	 "os/snd/snd_mp3.cpp os/snd/snd_dsound.cpp os/snd/snd_dummy.cpp os/snd/snd_openal.cpp ".
	 "os/snd/snd_simple.cpp os/snd/snd_simple_impl.cpp os/snd/snd_wave.cpp ".
         "ai/steering.cpp phys/treap.cpp object/sim_plant_mgr.cpp object/sim_tree.cpp ".
	 "game/forked.cpp ai/player_reverse.cpp";


my %all_hdrs;
my %all_srcs;

foreach my $dir (qw(ai game gfx gfx/pm gfx/shadow gfx/cloud main misc net
                    object phys res snd world public public/prototype 
		    os os/gfx os/gl os/net os/snd os/event msg)) {


    open(M, "<$dir/Makefile.am.tmpl") || die "error open: $dir/Makefile.am.tmpl - $!";
    open(M2, ">$dir/Makefile.am")     || die "error open: $dir/Makefile.am  - $!";

    print M2 "\n# Do not edit this file!\n",
             "# It is automatically generated from Makefile.am.tmpl by gen_source_defs.pl\n\n";

    @main_srcs=`(cd ../../src/$dir; ls *.cpp 2>/dev/null)`;
    $all_hdrs{$dir} = [map {chomp($_);$_} `(cd ../../src/$dir; ls *.h 2>/dev/null)`];

    sub find_files {
        my $dir = shift;
        my @srcs = @_;
        my @out_srcs = ();

        foreach $s (@srcs) {
            chomp($s);
            if (index($exclude, "$dir/$s") == -1) {
                push @out_srcs, '$(rp_src_dir)/' . "$dir/$s";
                push @{$all_srcs{$dir}}, $s;
            }
        }
        return \@out_srcs;
    }

    $ldir = $dir;
    $ldir =~ s!/!_!g;
    $files{$ldir} = find_files($dir, @main_srcs);

    while (<M>) {
        if ($tgt) {
            if (/^\s*$/) {
                print M2 "lib${tgt}_la_SOURCES = \\\n\t",
                    join (" \\
    \t", @{$files{$tgt}}), "\n";
                $tgt="";
            }
        }

        if (!$tgt) {
            if (/^lib([a-z0-9_]*)_la_SOURCES/ && defined($files{$1})) {
                $tgt = $1;
            } else {
                print M2;
            }
        }
    }

    close(M);
    close(M2);
}

sub out {
    my ($fn,$hs) = @_;
    open FH, ">$fn";
    foreach $d (sort keys %{$hs}) {
        print FH "$d\t";
        print FH join " ", @{$hs->{$d}};
        print FH "\n";
    }
    close FH;
}
&out("reaper_headers", \%all_hdrs);
&out("reaper_sources", \%all_srcs);

